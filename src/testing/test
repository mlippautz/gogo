#!/bin/sh

# Copyright 2009 The GoGo Authors. All rights reserved.
# Use of this source code is governed by the MIT
# license that can be found in the LICENSE file.

SELF="test.sh"
BASEDIR=`dirname $0`
cd $BASEDIR

TESTDIR="tests"
TMPDIR="tmp"
SHAPATH=/usr/bin/sha256sum

function do_checks() {
    echo "--------------------------------------------------------------------------------"
    echo "Performing internal checks"
    echo "--------------------------------------------------------------------------------"

    echo -n "Checking for sha256sum tool... "
    if [ -e $SHAPATH ]; then
        echo "ok"
    else
        echo "failed"
        exit 1
    fi

    echo -n "Checking for gogo compiler... "
    if [ -e ../gogo ]; then
        echo "ok"
    else
        echo "failed"
        exit 1
    fi  

    echo -n "Checking for $TESTDIR... "
    if [ -d $TESTDIR ]; then
        echo "ok"
    else
        echo "failed"
        exit 1
    fi  

    echo -n "Checking for $TMPDIR... "
    if [ -d $TMPDIR ]; then
        echo "ok"
    else
        mkdir -p $TMPDIR
        echo "creating it"
    fi    
}

function new_valids() {
    do_checks

    if [ -e valid_results ]; then
        echo "Removing valid_results... ok"
        rm valid_results
    fi  
    if [ -e valids_acked ]; then
        echo "Removing valids_acked... ok"
        rm valids_acked
    fi

    echo "--------------------------------------------------------------------------------"
    echo "Generating new valid results"
    echo "--------------------------------------------------------------------------------"
    for filename in $( ls $TESTDIR )
    do
        ../gogo $TESTDIR/$filename > $TMPDIR/$filename.tmp
        result=$(sha256sum $TMPDIR/$filename.tmp)
        echo "$result"
        echo "$result" >> valid_results
    done

    if [ -d $TMPDIR ]; then
        echo "Removing $TMPDIR... ok"
        rm -r $TMPDIR
    fi
}

function ack_valids() {
    if [ -e valid_results ]; then
        echo "--------------------------------------------------------------------------------"
        echo "Acknowledging the generated results"
        echo "--------------------------------------------------------------------------------"
        touch valids_acked    
    else
        echo "No last valid results found. Run './test newvalids' to generate them"
        exit 1 
    fi
}

function do_tests() {
    do_checks
    if [ -e valids_acked ]; then
        echo "--------------------------------------------------------------------------------"
        echo "Performing tests against last valid results"
        echo "--------------------------------------------------------------------------------"
        for filename in $( ls $TESTDIR )
        do
            ../gogo $TESTDIR/$filename > $TMPDIR/$filename.tmp
        done
        sha256sum -c valid_results
    else
        echo "--------------------------------------------------------------------------------"
        echo "No last acknowlegded valid results found. Run './test newvalids' 
and './test ackvalids' to generate and acknowledge them."
        exit 1
    fi
}

function do_clean() {
    echo "--------------------------------------------------------------------------------"
    echo "Cleaning"
    echo "--------------------------------------------------------------------------------"

    echo -n "Removing $TMPDIR... "
    if [ -d $TMPDIR ]; then
        rm -r $TMPDIR
        echo "ok"
    else
        echo "not needed"

    fi 
    if [ -e valids_acked ]; then
        echo "Removing valids_acked... ok"
        rm valids_acked
    fi
}

function do_help() {
    echo "--------------------------------------------------------------------------------"
    echo "GoGo testsuite"
    echo "--------------------------------------------------------------------------------"
    echo "To generate new results run './test newvalids'"
    echo "To acknowlegde them run './test ackvalids'"
    echo "To test against acked results run './test test'"
}

case $1 in
    newvalids)
        new_valids
        ;;
    ackvalids)
        ack_valids
        ;;
    test)
        do_tests
        ;;
    clean)
        do_clean
        ;;
    help)
        do_help
        ;;
    *)
	    echo "Usage: $SELF {newvalids|ackvalids|test|clean|help}" >&2
        ;;
esac
exit 0
        
